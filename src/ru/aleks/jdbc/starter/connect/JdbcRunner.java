package ru.aleks.jdbc.starter.connect;


import ru.util.ConnectionManager;
import ru.util.ConnectionPool;


import java.sql.SQLException;

import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class JdbcRunner {

    public static void main(String[] args) throws SQLException {
        try{checkMetaData();
        } finally {
            ConnectionPool.closePool();
        }

//        var result = getTicketsByFlightId(2L);// 2 or 1=1 SQL инекция
//        System.out.println(result);

//        var rez = getFlightsBetween(LocalDate.of(2022,3,1).atStartOfDay(),LocalDateTime.now());
//        System.out.println(rez);
    }
    private static  void checkMetaData() throws SQLException {
        try(var connection = ConnectionPool.get()){
        var metaData = connection.getMetaData();
        var catalog =metaData.getCatalogs();
        while (catalog.next()) {
            var catalogs = catalog.getString(1);
            // System.out.println(catalog.getString(1));// получения катвлогов
            var schema = metaData.getSchemas();

            while (schema.next()){
                var schemas = schema.getString("TABLE_SCHEM");
                //System.out.println(schema.getString("TABLE_SCHEM"));// получение схем

                var tables = metaData.getTables(catalogs,schemas,"%",new String[]{"TABLE"});
                if(schemas.equals("public")){
                while (tables.next()){
                    System.out.println(tables.getString("TABLE_NAME")); //  Получим каталог таблиц
                }}
            }
        }}
    }
    private static List<Long> getFlightsBetween(LocalDateTime start,LocalDateTime end) throws SQLException {
        List<Long> result = new ArrayList<>();
        String sql = """
                select id from flight WHERE departure_data BETWEEN ? and ?
                """;
        try (var connect = ConnectionManager.open();
        var prepareStatement = connect.prepareStatement(sql)){
            prepareStatement.setFetchSize(50);     // Количество строк тянушихся с базы в память приложения
            prepareStatement.setQueryTimeout(10); //  Времяостановки перед соединением с базой данных
            prepareStatement.setMaxRows(100);    //   Лимит для всех запросовБ чтобы память приложения не упала
            System.out.println(prepareStatement);
            prepareStatement.setObject(1, Timestamp.valueOf(start));
            System.out.println(prepareStatement);
            prepareStatement.setObject(2, Timestamp.valueOf(end));
            System.out.println(prepareStatement);
            var resultSet = prepareStatement.executeQuery();
            while (resultSet.next()){
                result.add(resultSet.getLong("id"));
            }

        }
        return result;
    }
    private static List<Long> getTicketsByFlightId(Long flightId) throws SQLException { // PreparedStatement
        List<Long> result = new ArrayList<>();
        String sql = """
                SELECT id from ticket where flight_id = ?
                """;
        try (var connect = ConnectionManager.open();
             var preparedstatement = connect.prepareStatement(sql)){
            preparedstatement.setLong(1,flightId);
            var resultSet = preparedstatement.executeQuery();
            while (resultSet.next()){
                //result.add(resultSet.getLong("id"));
                result.add(resultSet.getObject("id",Long.class));//работа с null
            }
        }
        return result;
    }
//    private static List<Long> getTicketsByFlightId(String flightId) throws SQLException { //Statement
//        List<Long> result = new ArrayList<>();
//        String sql = """
//                SELECT id from ticket where flight_id = %s
//                """.formatted(flightId);
//        try (var connect = ConnectionManager.open();
//             var  statement = connect.createStatement()){
//            var resultSet = statement.executeQuery(sql);
//            while (resultSet.next()){
//                //result.add(resultSet.getLong("id"));
//                result.add(resultSet.getObject("id",Long.class));//работа с null
//            }
//        }
//        return result;
//    }
}


//        Class<Driver> driverClass = Driver.class;
//        String SQl = """
//                insert into info (data) values ('autogenerated')
//                """;
//           try (
//                   var connection = ConnectionManager.open();
//                   var statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);) {
//               System.out.println(connection.getSchema());
//               System.out.println(connection.getTransactionIsolation());
//               var executeResult = statement.executeUpdate(SQl, Statement.RETURN_GENERATED_KEYS);
//               var generatedKeys = statement.getGeneratedKeys();
//               if(generatedKeys.next()){
//                   var generalId = generatedKeys.getInt("id");
//                   System.out.println(generalId);
//               }
//               //var executeResult = statement.executeQuery(SQl);
////               while (executeResult.next()){
////                   System.out.println(executeResult.getLong("id"));
////                   System.out.println(executeResult.getString("passenger_no"));
////                   System.out.println(executeResult.getBigDecimal("cost"));
////                   System.out.println("-----");
////               }
//               //System.out.println(executeResult);
//               //System.out.println(statement.getUpdateCount());
//           }



